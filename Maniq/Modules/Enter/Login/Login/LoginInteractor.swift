//
//  LoginInteractor.swift
//  Maniq
//
//  Created by Сергей Гаврилов on 02.02.2020.
//  Copyright (c) 2020 Сергей Гаврилов. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import FirebaseAuth
import FirebaseFirestore

final class LoginInteractor {
    
    private var vkAuth: VKAuth?
    
    typealias authHandler = (AuthResult, String) -> ()
    
    // MARK: - Private Properties -
    
    private var authHandlerCallback: ((AuthResult, String) -> ())!
    private var password: String!
    
    // MARK: - Private Methods -
    
    /// Проверка querySnapshot на nil
    private func check(querySnapshot: QuerySnapshot?) {
        guard !querySnapshot!.documents.isEmpty else {
            authError(result: AuthResult.failure(WrongEnter.loginDataIsWrong))
            return
        }
        getEmail(querySnapshot: querySnapshot!)
    }
    
    /// Проверка email на nil
    private func check(email: String?) {
        guard let email = email else {
            self.authError(result: AuthResult.failure(AuthError.userNotFound))
            return
        }
        login(email: email)
    }
    
    /// Получение email по QuerySnapshot
    private func getEmail(querySnapshot: QuerySnapshot) {
        firebaseServices.firestore.getEmail(querySnapshot: querySnapshot) { email in
            self.check(email: email)
        }
    }
    
    /// Выполнение логина по email и password
    private func login(email: String) {
        firebaseServices.auth.login(email: email, password: password, handler: self.authHandlerCallback)
    }
    
    /// Ошибка при логине
    private func authError(result: AuthResult) {
        authHandlerCallback(result, "")
    }
    
    /// Ошибка базы данных
    private func firestoreError(error: Error, handler: @escaping authHandler) {
        let fError = FirestoreErrorCode(rawValue: error._code)!
        handler(AuthResult.failure(FirestoreError(code: fError)), "")
    }
    
}

// MARK: - Extensions -

extension LoginInteractor: LoginInteractorInterface {
    
    func loginWith(username: String, password: String, handler: @escaping (AuthResult, String) -> ()) {
        self.authHandlerCallback = handler
        self.password = password
        firebaseServices.firestore.getSnapshotFrom(username: username) { snapshot, error in
            if let error = error {
                self.firestoreError(error: error, handler: handler)
                return
            }
            self.check(querySnapshot: snapshot)
        }
    }
    
    func loginWith(phoneNumber: String, password: String, handler: @escaping (AuthResult, String) -> ()) {
        self.authHandlerCallback = handler
        self.password = password
        firebaseServices.firestore.getSnapshotFrom(phoneNumber: phoneNumber) { snapshot, error in
            if let error = error {
                self.firestoreError(error: error, handler: handler)
                return
            }
            self.check(querySnapshot: snapshot)
        }
    }
    
    func vkLogin(delegate: VKAuthDelegate) {
        vkAuth = VKAuth()
        vkAuth?.delegate = delegate
        vkAuth?.wakeUpSession()
    }
    
    func isFilledData(_ loginText: String, _ password: String) -> Error? {
        if loginText.isEmpty && password.isEmpty {
            return NotFilled.allNotFilled
        }
        if loginText.isEmpty {
            return NotFilled.loginNotFilled
        }
        if password.isEmpty {
            return NotFilled.passwordNotFilled
        }
        return nil
    }
    
    func loadUser(email: String, handler: @escaping (Error?) -> ()) {
        firebaseServices.firestore.loadClient(email: email) { (queryDocumentSnapshot, error) in
            if error == nil {
                CurrentState.shared.clientData = ClientData(model: queryDocumentSnapshot!)
            }
            handler(error)
        }
    }
    
}
