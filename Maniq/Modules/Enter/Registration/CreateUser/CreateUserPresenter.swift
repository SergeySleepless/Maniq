//
//  CreateUserPresenter.swift
//  Maniq
//
//  Created by –°–µ—Ä–≥–µ–π –ì–∞–≤—Ä–∏–ª–æ–≤ on 02.02.2020.
//  Copyright (c) 2020 –°–µ—Ä–≥–µ–π –ì–∞–≤—Ä–∏–ª–æ–≤. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class CreateUserPresenter {

    // MARK: - Private properties -

    private unowned let view: CreateUserViewInterface
    private let interactor: CreateUserInteractorInterface
    private let wireframe: CreateUserWireframeInterface

    // MARK: - Lifecycle -

    init(view: CreateUserViewInterface, interactor: CreateUserInteractorInterface, wireframe: CreateUserWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    private func createUserDB(uid: String, name: String, email: String, isMaster: Bool) {
        let phoneNumber = CurrentState.shared.phoneNumber!
        interactor.createUserDB(uid: uid, name: name, phoneNumber: phoneNumber, email: email, isMaster: isMaster) { error in
            if let error = error {
                self.view.loadingView(show: false)
                self.wireframe.showErrorAlert(with: error.localizedDescription)
                return
            }
            self.wireframe.dismiss(animated: true)
        }
    }
}

// MARK: - Extensions -

extension CreateUserPresenter: CreateUserPresenterInterface {
    func isValid(userName: String) -> Bool {
        if !interactor.isValid(userName: userName) {
            view.userNameIsNotValid()
            wireframe.showAlert(with: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", message: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –º–∏–Ω–∏–º—É–º –∏–∑ 5 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è \".\" –∏ \"_\"")
            return false
        }
        return true
    }
    
    func isValid(email: String) -> Bool {
        if !interactor.isValid(email: email) {
            view.emainIsNotValid()
            wireframe.showAlert(with: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã", message: "–ê–¥—Ä–µ—Å –ø–æ—á—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"example@mail.com\"")
            return false
        }
        return true
    }
    
    func isValid(password: String) -> Bool {
        if !interactor.isValid(password: password) {
            view.passwordIsNotValid()
            wireframe.showAlert(with: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–∞—Ä–æ–ª—å", message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –º–∏–Ω–∏–º—É–º –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è \".\" –∏ \"_\"")
            return false
        }
        return true
    }
    
    func isEqual(password: String, repeatPassword: String) -> Bool {
        if !interactor.isEqual(password: password, repeatPassword: repeatPassword) {
            view.passwordIsNotEqual()
            wireframe.showAlert(with: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç", message: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª–µ–π")
            return false
        }
        return true
    }
    
    func removePreviousControllers() {
        wireframe.removePreviousControllers()
    }
    
    func createUser(name: String, email: String, password: String, isMaster: Bool) {
        view.loadingView(show: true)
        interactor.createUser(name: name, email: email, password: password, isMaster: isMaster) { result, error in
            if let error = error {
                self.view.loadingView(show: false)
                self.wireframe.showErrorAlert(with: error.localizedDescription)
                return
            }
            self.createUserDB(uid: result!.user.uid, name: name, email: email, isMaster: isMaster)
        }
    }
}
