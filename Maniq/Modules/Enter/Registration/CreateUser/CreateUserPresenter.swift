//
//  CreateUserPresenter.swift
//  Maniq
//
//  Created by –°–µ—Ä–≥–µ–π –ì–∞–≤—Ä–∏–ª–æ–≤ on 02.02.2020.
//  Copyright (c) 2020 –°–µ—Ä–≥–µ–π –ì–∞–≤—Ä–∏–ª–æ–≤. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit

final class CreateUserPresenter {
    
    // MARK: - Private properties -
    
    private unowned let view: CreateUserViewInterface
    private let interactor: CreateUserInteractorInterface
    private let wireframe: CreateUserWireframeInterface
    
    // MARK: - Lifecycle -
    
    init(view: CreateUserViewInterface, interactor: CreateUserInteractorInterface, wireframe: CreateUserWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    private func sendNotification() {
        NotificationCenter.default.post(Notification(name: Notification.Name("RegisterCompleted")))
    }
    
    private func createUserDB(uid: String, username: String, email: String, name: String, birthDate: Date, isMaster: Bool) {
        let phoneNumber = CurrentState.shared.phoneNumber!
        interactor.createUserDB(uid: uid, username: username, phoneNumber: phoneNumber, email: email, name: name, birthDate: birthDate, isMaster: isMaster) { error in
            if let error = error {
                self.view.loadingView(show: false)
                self.wireframe.showErrorAlert(with: error.localizedDescription)
                return
            }
            self.wireframe.dismiss(animated: true)
            CurrentState.shared.email = email
            self.sendNotification()
        }
    }
}

// MARK: - Extensions -

extension CreateUserPresenter: CreateUserPresenterInterface {
    func isValid(username: String) -> Bool {
        if !interactor.isValid(username: username) {
            view.userNameIsNotValid()
            wireframe.showAlert(with: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", message: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –º–∏–Ω–∏–º—É–º –∏–∑ 5 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è \".\" –∏ \"_\"")
            return false
        }
        return true
    }
    
    func isValid(email: String) -> Bool {
        if !interactor.isValid(email: email) {
            view.emailIsNotValid()
            wireframe.showAlert(with: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã", message: "–ê–¥—Ä–µ—Å –ø–æ—á—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"example@mail.com\"")
            return false
        }
        return true
    }
    
    func isValid(firstName: String) -> Bool {
        if !interactor.isValid(firstName: firstName) {
            wireframe.showAlert(with: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è", message: "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã")
            return false
        }
        return true
    }
    
    func isValid(birthDate: String) -> Bool {
        if !interactor.isValid(birthDate: birthDate) {
            view.birthDateIsNotValid()
            wireframe.showAlert(with: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", message: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
            return false
        }
        return true
    }
    
    func isValid(password: String) -> Bool {
        if !interactor.isValid(password: password) {
            view.passwordIsNotValid()
            wireframe.showAlert(with: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–∞—Ä–æ–ª—å", message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –º–∏–Ω–∏–º—É–º –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è \".\" –∏ \"_\"")
            return false
        }
        return true
    }
    
    func isEqual(password: String, repeatPassword: String) -> Bool {
        if !interactor.isEqual(password: password, repeatPassword: repeatPassword) {
            view.passwordIsNotEqual()
            wireframe.showAlert(with: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç", message: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª–µ–π")
            return false
        }
        return true
    }
    
    func removePreviousControllers() {
        wireframe.removePreviousControllers()
    }
    
    func createUser(username: String, email: String, name: String, birthDate: String, isMaster: Bool, password: String) {
        view.loadingView(show: true)
        interactor.checkDataExist(email: email, username: username) { (error) in
            if let error = error {
                self.view.loadingView(show: false)
                self.wireframe.showErrorAlert(with: error.localizedDescription)
                return
            }
            self.interactor.createUser(email: email, password: password, isMaster: isMaster) { result, error in
                if let error = error {
                    self.view.loadingView(show: false)
                    self.wireframe.showErrorAlert(with: error.localizedDescription)
                    return
                }
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "dd.MM.yyyy"
                let date = dateFormatter.date(from: birthDate)
                self.createUserDB(uid: result!.user.uid, username: username, email: email, name: name, birthDate: date!, isMaster: isMaster)
            }
        }
    }
}
