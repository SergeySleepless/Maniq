//
//  RegistrationPresenter.swift
//  Maniq
//
//  Created by Сергей Гаврилов on 02.02.2020.
//  Copyright (c) 2020 Сергей Гаврилов. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

final class RegistrationPresenter {
    
    // MARK: - Private properties -
    
    private unowned let view: RegistrationViewInterface
    private let interactor: RegistrationInteractorInterface
    private let wireframe: RegistrationWireframeInterface
    
    // MARK: - Lifecycle -
    
    init(view: RegistrationViewInterface, interactor: RegistrationInteractorInterface, wireframe: RegistrationWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension RegistrationPresenter: RegistrationPresenterInterface {
    
    func getFormattedPhoneNumber(number: String) -> String {
        view.loadingView(show: true)
        let cleanPhoneNumber = number.components(separatedBy: CharacterSet.decimalDigits.inverted).joined()
        let mask = "+X (XXX) XXX-XX-XX"
        
        var result = ""
        var index = cleanPhoneNumber.startIndex
        for ch in mask where index < cleanPhoneNumber.endIndex {
            if ch == "X" {
                result.append(cleanPhoneNumber[index])
                index = cleanPhoneNumber.index(after: index)
            } else {
                result.append(ch)
            }
        }
        interactor.set(number: result)
        view.nextButtonIs(enabled: result.count == mask.count)
        return result
    }
    
    func set(number: String) {
        interactor.set(number: number)
    }
    
    func auth() {
        interactor.auth() { number, verificationID, error in
            self.view.loadingView(show: false)
            if let error = error {
                self.wireframe.showErrorAlert(with: error.localizedDescription)
            } else {
                self.interactor.saveVerificationID(verificationID: verificationID!)
                self.wireframe.routeToCheckCode(number: number)
            }
        }
    }
    
}
