//
//  CreateUserInteractor.swift
//  Maniq
//
//  Created by Сергей Гаврилов on 02.02.2020.
//  Copyright (c) 2020 Сергей Гаврилов. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import FirebaseAuth
import FirebaseFirestore
import Validator

final class CreateUserInteractor {
}

// MARK: - Extensions -

extension CreateUserInteractor: CreateUserInteractorInterface {
    
    func isValid(userName: String) -> Bool {
        let RegEx = "[A-Z0-9a-z._]{5,18}"
        let predicate = NSPredicate(format:"SELF MATCHES %@", RegEx)
        return predicate.evaluate(with: userName)
    }
    
    func isValid(email: String) -> Bool {
        let RegEx = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}"
        let predicate = NSPredicate(format:"SELF MATCHES %@", RegEx)
        return predicate.evaluate(with: email)
    }
    
    func isValid(password: String) -> Bool {
        let RegEx = "[A-Z0-9a-z._]{6,18}"
        let predicate = NSPredicate(format:"SELF MATCHES %@", RegEx)
        return predicate.evaluate(with: password)
    }
    
    func isEqual(password: String, repeatPassword: String) -> Bool {
        return password == repeatPassword
    }
    
    func createUser(name: String, email: String, password: String, isMaster: Bool, completionHandler: @escaping (AuthDataResult?, Error?) -> ()) {
        let credential = EmailAuthProvider.credential(withEmail: email, password: password)
        
        CurrentState.shared.user?.link(with: credential) { result, error in
            completionHandler(result, error)
        }
    }
    
    func createUserDB(uid: String, name: String, phoneNumber: String, email: String, isMaster: Bool, completionHandler: @escaping (Error?) -> ()) {
        let database = Firestore.firestore()
        database.collection("users").addDocument(data: [
            "username": name,
            "phoneNumber": phoneNumber,
            "email": email,
            "isMaster": isMaster,
            "uid": uid
        ]) { error in
            completionHandler(error)
        }
    }
    
}
