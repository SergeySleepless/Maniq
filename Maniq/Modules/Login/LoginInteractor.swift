//
//  LoginInteractor.swift
//  Maniq
//
//  Created by –°–µ—Ä–≥–µ–π –ì–∞–≤—Ä–∏–ª–æ–≤ on 02.02.2020.
//  Copyright (c) 2020 –°–µ—Ä–≥–µ–π –ì–∞–≤—Ä–∏–ª–æ–≤. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import FirebaseAuth
import FirebaseFirestore

final class LoginInteractor {
    
    typealias authHandler = (AuthResult) -> ()
    
    // MARK: - Private Properties -
    
    private var authHandlerCallback: ((AuthResult) -> ())!
    private var password: String!
    
    // MARK: - Private Methods -
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ querySnapshot –Ω–∞ nil
    private func check(querySnapshot: QuerySnapshot?) {
        guard !querySnapshot!.documents.isEmpty else {
            authError(result: AuthResult.failure(WrongEnter.loginDataIsWrong))
            return
        }
        getEmail(querySnapshot: querySnapshot!)
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ email –Ω–∞ nil
    private func check(email: String?) {
        guard let email = email else {
            self.authError(result: AuthResult.failure(AuthError.userNotFound))
            return
        }
        login(email: email)
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ email –ø–æ QuerySnapshot
    private func getEmail(querySnapshot: QuerySnapshot) {
        firebaseServices.firestore.getEmail(querySnapshot: querySnapshot) { email in
            self.check(email: email)
        }
    }
    
    /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –ø–æ email –∏ password
    private func login(email: String) {
        firebaseServices.auth.login(email: email, password: password, handler: self.authHandlerCallback)
    }
    
    /// –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
    private func authError(result: AuthResult) {
        authHandlerCallback(result)
    }
    
    /// –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Öb
    private func firestoreError(error: Error, handler: @escaping authHandler) {
        let fError = FirestoreErrorCode(rawValue: error._code)!
        handler(AuthResult.failure(FirestoreError(code: fError)))
    }
    
}

// MARK: - Extensions -

extension LoginInteractor: LoginInteractorInterface {
    
    func loginWith(username: String, password: String, handler: @escaping authHandler) {
        self.authHandlerCallback = handler
        self.password = password
        firebaseServices.firestore.getSnapshotFrom(username: username) { snapshot, error in
            if let error = error {
                self.firestoreError(error: error, handler: handler)
                return
            }
            self.check(querySnapshot: snapshot)
        }
    }
    
    func loginWith(phoneNumber: String, password: String, handler: @escaping authHandler) {
        self.authHandlerCallback = handler
        self.password = password
        firebaseServices.firestore.getSnapshotFrom(phoneNumber: phoneNumber) { snapshot, error in
            if let error = error {
                self.firestoreError(error: error, handler: handler)
                return
            }
            self.check(querySnapshot: snapshot)
        }
    }
    
}
